{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://nyanncat.github.io","root":"/"},"pages":[],"posts":[{"title":"threadlocal","slug":"threadlocal","date":"2021-05-25T12:44:28.000Z","updated":"2021-05-25T12:44:57.472Z","comments":true,"path":"2021/05/25/threadlocal/","link":"","permalink":"http://nyanncat.github.io/2021/05/25/threadlocal/","excerpt":"","text":"ThreadLocal 线程内部的局部变量，不同的线程之间不会相互干扰 使用场景为了保证多线程对共享变量的安全访问，通常使用锁来保证同一时刻只有一个线程对共享变量进行操作。 Thread Local 使共享资源在每个线程内都有独立的拷贝，避免了加锁。 常见场景：数据库连接，Session管理，Spring事务 内存泄漏 ThreadLocalMap 中的entity使用WeakReference来避免ThreadLocal对象内存泄漏 Value 仍然存在内存泄漏的风险，特别是使用线程池的情况下, Thread引用对象无法被回收 就其原因**Thread的生命周期和ThreadLocalMap的生命周期一致** 建议：==每次调用完成后，使用remove方法清理对象==","categories":[],"tags":[]},{"title":"分库分表-ShardingJDBC","slug":"ShardingJDBC","date":"2021-05-25T11:49:41.000Z","updated":"2021-05-25T12:34:18.926Z","comments":true,"path":"2021/05/25/ShardingJDBC/","link":"","permalink":"http://nyanncat.github.io/2021/05/25/ShardingJDBC/","excerpt":"","text":"为什么需要分库分表随着业务的发展，数据量的增加，单表数据量达到上限，性能瓶颈出现 解决方案 把数据分散在不同的数据库中，使得单一数据库的数据量变小来缓解单一数据库的性能问题，从而达到提升数据库性能的目的，如下图：将电商数据库拆分为若干独立的数据库，并且对于大表也拆分为若干小表，通过这种数据库拆分的方法来解决数据库的性能问题。 在生产中通常包括：垂直分库、垂直分表、水平分库、水平分表四种方式 垂直分表将访问频次低的商品描述信息单独存放在一张表中，访问频次较高的商品基本信息单独放在一张表中, 核心概念是动静分离(热数据/冷数据) 通常我们按以下原则进行垂直拆分: 把不常用的字段单独放在一张表 把text，blob等大字段拆分出来放在附表中 经常组合查询的列放在一张表中 垂直分库垂直分库是指按照业务将表进行分类，分布到不同的数据库上面，每个库可以放在不同的服务器上， 它的核心理念是专库专用(微服务概念) 垂直分库能带来的优点： 解决业务层面的耦合，业务清晰 能对不同业务的数据进行分级管理、维护、监控、扩展等 高并发场景下，垂直分库一定程度的提升IO、数据库连接数、降低单机硬件资源的瓶颈 缺点： 跨库的业务不能join，只能通过远程调用方式解决 分布式事务处理复杂 垂直分库通过将表按业务分类，然后分布在不同数据库，并且可以将这些数据库部署在不同服务器上，从而达到多个服务器共同分摊压力的效果，但是依然没有解决单表数据量过大的问题。 水平拆分水平分库是把同一个表的数据按一定规则拆到不同的数据库中，每个库可以放在不同的服务器上。 总结优先级如下： 垂直分表：可以把一个宽表的字段按访问频次、是否是大字段的原则拆分为多个表，这样既能使业务清晰，还能提升部分性能。拆分后，尽量从业务角度避免联查，否则性能方面将得不偿失。 垂直分库：可以把多个表按业务耦合松紧归类，分别存放在不同的库，这些库可以分布在不同服务器，从而使访问压力被多服务器负载，大大提升性能，同时能提高整体架构的业务清晰度，不同的业务库可根据自身情况定制优化方案。但是它需要解决跨库带来的所有复杂问题。 水平分库：可以把一个表的数据(按数据行)分到多个不同的库，每个库只有这个表的部分数据，这些库可以分布在不同服务器，从而使访问压力被多服务器负载，大大提升性能。它不仅需要解决跨库带来的所有复杂问题，还要解决数据路由的问题(数据路由问题后边介绍)。 水平分表：可以把一个表的数据(按数据行)分到多个同一个数据库的多张表中，每个表只有这个表的部分数据，这样做能小幅提升性能，它仅仅作为水平分库的一个补充优化。 一般来说，在系统设计阶段就应该根据业务耦合松紧来确定垂直分库，垂直分表方案，在数据量及访问压力不是特别大的情况，首先考虑缓存、读写分离、索引技术等方案。若数据量极大，且持续增长，再考虑水平分库水平分表方案。 最佳实践 Sharding-JDBC 增强版JDBC, 简化对分库分表后，数据查询的操作 主要功能： 数据分片 读写分离 分片策略定制化/无中心分布式主键","categories":[],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"http://nyanncat.github.io/tags/MySQL/"},{"name":"ShardingJDBC","slug":"ShardingJDBC","permalink":"http://nyanncat.github.io/tags/ShardingJDBC/"}]}],"categories":[],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"http://nyanncat.github.io/tags/MySQL/"},{"name":"ShardingJDBC","slug":"ShardingJDBC","permalink":"http://nyanncat.github.io/tags/ShardingJDBC/"}]}